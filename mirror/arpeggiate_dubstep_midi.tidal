hush

setcps(120/4/60)

p "arpeggio" silence

p "dubstep" silence

p "dubstep" $ stack [
  s "[[bd ~ ~ bd ~ ~ ~ ~]/2 [bd ~ ~ ~ ~ ~ ~ bd ~ ~ ~ ~ bd ~ ~ bd ~]]" # n (irand 6) # sound "bd" # speed (((cF 1 "91") + 1.2) * 0.5) # room 0.05 #orbit 1  -- # crush 5 -- step 1 (1st bar 8, 2nd bar 16 grid)
  , s "[[~ ~ cp ~]*2]/2" -- step 2
  , s "[[~ ~ sn ~]*2]/2" -- step 2
  , s "[[hh:8*4 [~ hh:8*3]]*2]/2" # s "hh:8" # speed "1 2 1 2" # gain 1.3 -- step 3
  -- , s "[[~ ~ ~ hh:5]*8]/2" # gain 0.5 -- step 3
  , s "[[~*13 hh:7 ~*2]*2]/2" # s "hh:10" # bandf "<3000 2000 4000 1000>" # bandq 10 # gain 20 -- step 3
  , s "[[~*10 hh:10 ~*5]*2]/2" # s "hh:9" # bandf "<1000 500 2000 1000>" # bandq 10 # gain 20-- step 3
  -- , s "[[drum:3*4 ~*2 drum:3*2]]/2" # gain 1.0 -- -- step 4
] # gain ((cF 1 "93")  * 2)

-- arp "<up down diverge>" "<a'm9'8 e'7sus4'8>"
-- arp "<down down diverge converge>" "<a'm7'8 e'7sus4'8>"
-- bandf
-- [1100 1200 1300 1000]
-- [1800 1200 2500 2000]
p "arpeggio" silence

p "arpeggio" $ n (arp "<down down diverge converge>" "<a'm7'8 e'7sus4'8>")
  # sound "superpiano"
  # shape ((cF 1 "84"))
  # crush ((cF 1 "7")  * 10)
  # room (sine*2) # size 0.2 # orbit 4
  # bandf ((cF 1 "74")*1000)*"[1100 1200 1300 1000]/4" # bandq ((cF 1 "5")*200)--(sine*1)
  -- # delayfeedback "[0.1 0.5 0.9]/2" # delay "0.2" # orbit 1
  # gain ((cF 1 "10")  * 2)

-- original
do
  let hh="hh"
  let hh2="hh:10"
  let sn="sn:1"
  let sn2="sn:3"

do
  let hh="hh:5"
  let hh2="hh:8"
  let sn="pipe_sounds:14"
  let sn2="sn:3"
  -- let pipe_1="pipe_sounds:14"
  p "test" $ "[3 2 1 4]" # sound hh # gain 2

p "test" silence
